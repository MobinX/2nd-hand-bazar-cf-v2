generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  slug          String
  icon          String?
  details       String?
  type          String
  createdAt     DateTime   @default(now())
  parentId      Int?
  showInHome    Boolean    @default(false)
  HomePageTitle String?
  parent        Category?  @relation("SubCategory", fields: [parentId], references: [id])
  subCategories Category[] @relation("SubCategory")
  products      Product[]  @relation("CategoryToProduct")
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String
  price       Float
  description String
  image       String
  createdAt   DateTime   @default(now())
  uploaderId  Int
  uploader    User       @relation(fields: [uploaderId], references: [id])
  category    Category[] @relation("CategoryToProduct")
}

model Address {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  city      String
  state     String
  country   String
  zip       String
  phone     String
  createdAt DateTime @default(now())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id               Int        @id @default(autoincrement())
  name             String
  email            String
  password         String?
  provider         String?
  token            String?
  role             String
  phone            String
  createdAt        DateTime   @default(now())
  Address          Address?
  cart             Cart?
  education        Education?
  uploadedProducts Product[]
}

model Cart {
  id        Int       @id @default(autoincrement())
  quantity  Int
  createdAt DateTime  @default(now())
  userId    Int       @unique
  productId Int
  user      User      @relation(fields: [userId], references: [id])
  cartItem  CartItem?
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  cartId    Int      @unique
  productId Int
  cart      Cart     @relation(fields: [cartId], references: [id])
}

model Education {
  id        Int    @id @default(autoincrement())
  institute String
  degree    String
  field     String
  startYear Int
  endYear   Int
  userId    Int    @unique
  user      User   @relation(fields: [userId], references: [id])
}

model DeletedFiles {
  id        Int    @id @default(autoincrement())
  name     String
}